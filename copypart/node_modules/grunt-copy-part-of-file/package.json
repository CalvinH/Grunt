{
  "name": "grunt-copy-part-of-file",
  "description": "This plugin helps me copy a section from 1 file to another.  I use it with angularjs to keep my index.html and my index-e2e.html file in sync",
  "version": "0.1.1",
  "homepage": "https://github.com/dehru/grunt-copy-part-of-file",
  "author": {
    "name": "Dehru Cromer",
    "email": "dehru2@yahoo.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dehru/grunt-copy-part-of-file.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-copy-part-of-file\n\n> This grunt tasks will copy a portion of one file and insert it into another file. I use this to keep my angular index.html file in sync with my index-e2e.html file rather than trying to manually copy all the scripts each time the index.html changes.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-copy-part-of-file --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-copy-part-of-file');\n```\n\n## The \"copy_part_of_file\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `copy-part-of-file` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  copy_part_of_file: {\n      simple_replace_scripts: {\n          options: {\n              sourceFileStartPattern: '<!-- SIMPLE START -->',\n              sourceFileEndPattern: '<!-- SIMPLE END -->',\n              destinationFileStartPattern: '<!-- START -->',\n              destinationFileEndPattern: '<!-- END -->'\n          },\n          files: {\n              'test/fixtures/simple-destination.html': ['test/fixtures/simple-source.html']\n          }\n      }\n  },\n})\n```\n\n### Options\n\n#### options.soureFileStartPattern\nType: `String`\nDefault value: `A STRING OR REGEX`\n\nA string or regexp value that is used to match part of the source file and start to copy the content at this line.\n\n#### options.soureFileEndPattern\nType: `String`\nDefault value: `A STRING OR REGEX`\n\nA string or regexp value that is used to match part of the source file and stop copying at this line.\n\n#### options.destinationFileStartPattern\nType: `String`\nDefault value: `A STRING OR REGEX`\n\nA string or regexp value that is used to match part of the destination file and begin to copy the source matched above below this spot.\n\n#### options.destinationFileEndPattern\nType: `String`\nDefault value: `A STRING OR REGEX`\n\nA string or regexp value that is used to match part of the destination file and stop coping the source matched above at this line.\n\n#### Example Usage\nIn this example I use the following config and source content to create the destination content\n\n#### Grunt Config\n```js\ngrunt.initConfig({\n  copy_part_of_file: {\n        simple_replace_scripts: {\n            options: {\n                sourceFileStartPattern: '<!-- SIMPLE START -->',\n                sourceFileEndPattern: '<!-- SIMPLE END -->',\n                destinationFileStartPattern: '<!-- START -->',\n                destinationFileEndPattern: '<!-- END -->'\n            },\n            files: {\n                'test/fixtures/simple-destination.html': ['test/fixtures/simple-source.html']\n            }\n        }\n    },\n})\n```\n\n#### Source File ( referenced as test/fixtures/simple-source.html in config above )\n```html\n<!DOCTYPE html>\n<html>\n<!-- SIMPLE START -->\n<head>\n    <title></title>\n</head>\n<!-- SIMPLE END -->\n<body>\n\n</body>\n</html>\n```\n\n#### Destination File ( referenced as test/fixtures/simple-destination.html in config above )\n```html\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n<!-- START -->\n<!-- END -->\n\n</body>\n</html>\n\n```\n\n##Final Destination File After Task Runs ( Not that anyone would do this...but two heads are better than one. )\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n<!-- START -->\n<head>\n    <title></title>\n</head>\n<!-- END -->\n\n</body>\n</html>\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n0.1.0 - First release...supports what I need it to do.\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-copy-part-of-file@0.1.1",
  "_from": "grunt-copy-part-of-file@~0.1.1"
}
